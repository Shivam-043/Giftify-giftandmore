"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Numbers = void 0;
const server_client_1 = require("@vonage/server-client");
const Feature_1 = require("./enums/Feature");
const SearchPattern_1 = require("./enums/SearchPattern");
const lodash_omit_1 = __importDefault(require("lodash.omit"));
const remapObjects = (mapping, newObject, oldObject) => {
    for (const key in mapping) {
        if (oldObject[mapping[key]]) {
            newObject[key] = oldObject[mapping[key]];
            delete oldObject[mapping[key]];
        }
    }
    newObject = Object.assign(Object.assign({}, newObject), oldObject);
    return newObject;
};
const buildSearch = ({ endsWith, startsWith, contains, searchPattern, pattern, country, }) => {
    searchPattern = searchPattern !== null && searchPattern !== void 0 ? searchPattern : SearchPattern_1.SearchPattern.CONTAINS;
    if (pattern) {
        return {
            search_pattern: searchPattern,
            pattern: pattern,
            country: country,
        };
    }
    if (contains) {
        return {
            search_pattern: SearchPattern_1.SearchPattern.CONTAINS,
            pattern: contains,
            country: country,
        };
    }
    if (endsWith) {
        return {
            search_pattern: SearchPattern_1.SearchPattern.ENDS_WITH,
            pattern: endsWith,
            country: country,
        };
    }
    if (startsWith) {
        return {
            search_pattern: SearchPattern_1.SearchPattern.START_WITH,
            pattern: startsWith,
            country: country,
        };
    }
    return {};
};
const sortFeatures = (features) => {
    if (features.length > 4) {
        throw new Error('Invalid number of features request');
    }
    if (features.length === 1) {
        return features.join();
    }
    if (features.length === 3) {
        return [Feature_1.Feature.SMS, Feature_1.Feature.MMS, Feature_1.Feature.VOICE].join(',');
    }
    const newOrder = [];
    if (features.includes(Feature_1.Feature.SMS)) {
        newOrder.push(Feature_1.Feature.SMS);
    }
    if (features.includes(Feature_1.Feature.VOICE)) {
        newOrder.push(Feature_1.Feature.VOICE);
    }
    if (features.includes(Feature_1.Feature.MMS)) {
        newOrder.push(Feature_1.Feature.MMS);
    }
    return newOrder.join(',');
};
class Numbers extends server_client_1.Client {
    constructor() {
        super(...arguments);
        this.authType = server_client_1.AuthenticationType.QUERY_KEY_SECRET;
    }
    buyNumber(params) {
        return __awaiter(this, void 0, void 0, function* () {
            const mapping = { target_api_key: 'targetApiKey' };
            const data = remapObjects(mapping, {}, params);
            const resp = yield this.sendFormSubmitRequest(`${this.config.restHost}/number/buy`, data);
            return {
                errorCode: resp.data['error-code'],
                errorCodeLabel: resp.data['error-code-label'],
            };
        });
    }
    cancelNumber(params) {
        return __awaiter(this, void 0, void 0, function* () {
            const mapping = { target_api_key: 'targetApiKey' };
            const data = remapObjects(mapping, {}, params);
            const resp = yield this.sendFormSubmitRequest(`${this.config.restHost}/number/cancel`, data);
            return {
                errorCode: resp.data['error-code'],
                errorCodeLabel: resp.data['error-code-label'],
            };
        });
    }
    getAvailableNumbers(filter) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            const mapping = {
                search_pattern: 'searchPattern',
            };
            const data = (0, lodash_omit_1.default)(remapObjects(mapping, {}, Object.assign(Object.assign({}, filter), buildSearch(filter))), ['startsWith', 'contains', 'endsWith', 'searchPattern']);
            if (((_a = data.features) === null || _a === void 0 ? void 0 : _a.length) > 0) {
                data.features = sortFeatures(data.features);
            }
            const resp = yield this.sendGetRequest(`${this.config.restHost}/number/search`, data);
            return resp.data;
        });
    }
    getOwnedNumbers(filter) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!filter) {
                filter = {};
            }
            const mapping = {
                application_id: 'applicationId',
                has_application: 'hasApplication',
                search_pattern: 'searchPattern',
            };
            const data = remapObjects(mapping, {}, filter);
            const resp = yield this.sendGetRequest(`${this.config.restHost}/account/numbers`, data);
            return resp.data;
        });
    }
    updateNumber(params) {
        return __awaiter(this, void 0, void 0, function* () {
            const mapping = {
                app_id: 'applicationId',
            };
            const data = remapObjects(mapping, {}, params);
            const resp = yield this.sendFormSubmitRequest(`${this.config.restHost}/number/update`, data);
            return {
                errorCode: resp.data['error-code'],
                errorCodeLabel: resp.data['error-code-label'],
            };
        });
    }
}
exports.Numbers = Numbers;
//# sourceMappingURL=numbers.js.map