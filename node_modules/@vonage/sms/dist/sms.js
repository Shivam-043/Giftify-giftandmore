"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SMS = void 0;
const server_client_1 = require("@vonage/server-client");
const MessageSendAllFailure_1 = require("./classes/Error/MessageSendAllFailure");
const MessageSendPartialFailure_1 = require("./classes/Error/MessageSendPartialFailure");
class SMS extends server_client_1.Client {
    send(params) {
        return __awaiter(this, void 0, void 0, function* () {
            const resp = yield this.sendPostRequest(`${this.config.restHost}/sms/json`, params);
            let failures = 0;
            const messageCount = parseInt(resp.data['message-count'], 10);
            const messageData = {
                messageCount,
                'message-count': resp.data['message-count'],
                messages: [],
            };
            for (const element of resp.data.messages) {
                const message = element;
                if (element['message-id']) {
                    message.messageId = element['message-id'];
                }
                if (element['remaining-balance']) {
                    message.remainingBalance = element['remaining-balance'];
                }
                if (element['message-price']) {
                    message.messagePrice = element['message-price'];
                }
                if (element['client-ref']) {
                    message.clientRef = element['client-ref'];
                }
                if (element['account-ref']) {
                    message.accountRef = element['account-ref'];
                }
                messageData.messages.push(message);
            }
            for (let i = 0; i < messageCount; i++) {
                if (messageData.messages[i].status !== '0') {
                    failures++;
                }
            }
            if (failures === messageCount) {
                throw new MessageSendAllFailure_1.MessageSendAllFailure('All SMS messages failed to send', messageData);
            }
            if (failures > 0) {
                throw new MessageSendPartialFailure_1.MessageSendPartialFailure('Some SMS messages failed to send', messageData);
            }
            return messageData;
        });
    }
}
exports.SMS = SMS;
//# sourceMappingURL=sms.js.map